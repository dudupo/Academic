" do stuff you want to do on every buffer enter event

" guard to end loading if it has been loaded for the currently edited file
if g:localvimrc_sourced_once_for_file
  finish
endif

" do stuff you want to do only once for a edited file

" guard to end loading if it has been loaded for the running vim instance
if g:localvimrc_sourced_once
  finish
endif

" do stuff you want to do only once for a running vim instance

call IMAP('>>', '\ket{<++>}<++>', 'tex')
call IMAP('<<', '\bra{<++>}<++>', 'tex')
call IMAP('<>', '\braket{<++>|<++>|<++>}<++>', 'tex')
call IMAP('`1s', '\ket{\psi<++>}<++>'  	,"tex")
call IMAP('`1b', '\bra{<++>}<++>'	,"tex")
call IMAP('->',  '\rightarrow'		,"tex")
call IMAP('<-',  '\leftarrow'		,"tex")
call IMAP('expp',  '\expp{<++>}<++>'		,"tex")
call IMAP('prbb',  '\prb{<++>}<++>'		,"tex")
call IMAP('prbm',  '\prbm{<++>}{<++>}<++>'		,"tex")
call IMAP('1/2',  '\frac{1}{2}'		,"tex")
call IMAP('1/3',  '\frac{1}{3}'		,"tex")
call IMAP('1/4',  '\frac{1}{4}'		,"tex")
call IMAP('1/5',  '\frac{1}{5}'		,"tex")
call IMAP('1/6',  '\frac{1}{6}'		,"tex")
" call IMAP('<<', '&\le', 		'"tex")
call IMAP('dff', "\\begin{definition}\n<++>\n\\end{definition}", "tex")
call IMAP('prff', "\\begin{proof}\n<++>\n\\end{proof}", "tex")
call IMAP('claimm', "\\begin{claim}\n<++>\n\\end{claim}", "tex")
call IMAP('remarkk', "\\begin{remark}\n<++>\n\\end{remark}", "tex")
call IMAP("'mea", "measurment ", "tex")
call IMAP("'Ha", "Hamiltonian ", "tex")
call IMAP('`fun', "function! g:GPT()\n\t return 0\nendfunction \ncommand! GPT call GPT()", "vim") 
call IMAP("'y", "\\ket{\\psi^{(i)}}", "tex")
call IMAP(">ki", "\\psi^{(k)}_{i}", "tex")
call IMAP(">kj", "\\psi^{(k)}_{j}", "tex")


function! g:Above()
  execute "normal! i\\overbrace{<++>}^{<++>}" 
  return 0
endfunction

command! Above call Above()


function! g:TwoCol()
   execute "normal! o\\begin{figure}[h]\<cr>\\begin{subfigure}[b]{0.65\\textwidth}\<cr>\<cr>\\end{subfigure}\<cr>\\begin{subfigure}[b]{0.05\\textwidth}\<cr>\\\<cr>\\end{subfigure}\<cr>\\begin{subfigure}[b]{0.25\\textwidth} \<cr>\<cr>\\end{subfigure} \<cr>\\end{figure}" 
   return 0
endfunction

command! TwoCol call TwoCol()


function! g:GPTde()
  let l:AIPrompt = "AI Fix grammar and misspelling errors, and then reformulate" 
  exe '/\\begin{definition}\zs/+,/\ze\\end{definition}/-' . AIPrompt
  return 0
endfunction
command! GPTde call GPTde()
function! g:GPTcl()
  let l:AIPrompt = "AI Fix grammar and misspelling errors, and then reformulate" 
  exe '/\\begin{claim}\zs/+,/\ze\\end{claim}/-' . AIPrompt
  return 0
endfunction
command! GPTcl call GPTcl()

function! g:GPTpr()
  let l:AIPrompt = "AI Fix grammar and misspelling errors, and then reformulate" 
  exe '/\\begin{proof}\zs/+,/\ze\\end{proof}/-' . AIPrompt
  return 0
endfunction
command! GPTpr call GPTpr()


call AutoCorrect()

" duplicate current math statement and paste in the end of the line. 
function! g:DuplicateMath()
  execute "normal!F$vf$y$pF$"
  return 0
endfunction 
command! Dup call DuplicateMath()


function! g:SplitEqu()
  execute "normal! o\\end{split}\<cr>\\end{equation*}\<cr>\\begin{equation*}\<cr>\\begin{split}\<cr>"
return 0
endfunction
command! SplitEqu call SplitEqu()

function! g:Equ()
  execute "normal! o\\begin{equation*}\<cr>\\begin{split}\<cr>\<cr>\\end{split}\<cr>\\end{equation*}<++>" 
  return 0
endfunction 
command! Equ call Equ()


function! g:ExtractEqu()
  execute "normal! F$vf$do:E€kb€kb€ýa:E€ku€ku€ku€ýapx"
  return 0
endfunction
command! ExtractEqu call ExtractEqu()

function! g:Ecase()
  execute "normal! o\\begin{cases}\<cr><++>&<++> \\\\\ \<cr><++>&<++>\<cr>\\end{cases}<++>" 
  return 0
endfunction 
command! Ecase call Ecase()

function! g:Newcommand()
  let l:pos = getcurpos()
  let l:line = pos[1] + 1
  execute "normal! i\<esc>?newcommand\<cr>$o\\newcommand{<++>}{<++>}\<esc>:" . line  . "\<cr>" . "$" ."i<++>\<esc>?newcommand\<cr>"
  return 0
endfunction 

command! Newco call Newcommand()

" call IMAP(,,"tex")
" call IMAP(,,"tex")

function! g:Series(_char, _end_sym)
  let l:ret = ""
  let l:c = 0
  let l:terms = 3  
  let l:tempchar = a:_char
  let l:tempesym = a:_end_sym
  while c <= terms
    if c < terms
      let ret = ret . tempchar .  "_{" . c . "},"
    else
      let ret = ret . "... " . tempchar .  "_{"  . tempesym  . "}" 
    endif
    let c += 1 
  endwhile
  execute 'normal i'.ret 
  return 0
endfunction
"command! Series call <SID>Series(<args>

function! g:WNote(note)
  let l:_note =  a:note
  let l:_name = input('Enter note title: ')
  let _note = substitute(_note, '\', '\\', 'g')
  execute ':!echo -en ' . _note . '   > /home/davidponar/workspace/DBnotes/' . _name  
  return 0
endfunction 

function! g:Alg()
  execute "normal! o\\begin{algorithm}[H]\<cr><++>\<cr>\\end{algorithm}\<cr><++>" 
  return 0
endfunction 
command! Alg call Alg()

function! g:Aif()
  execute "normal! i\\If{<++>}{\<cr><++>\<cr>}\\Else{\<cr>}<++>" 
  return 0
endfunction 
command! Aif call Aif()

function! g:Afor()
  execute "normal! i\\For{<++>}{\<cr><++>\<cr>}<++>" 
  return 0
endfunction 
command! Afor call Afor()

nnoremap 1 A <esc>p

function! MySplit( fname )
  let bufnum=bufnr(expand(a:fname))
  let winnum=bufwinnr(bufnum)
  if winnum != -1
    " Jump to existing split
  else
    " Make new split as usual
    exe "split " . a:fname
    exe "set syntax=vim"
    exe "resize -15"
    exe "winc p"
    "exe "set lines=20"
  endif
endfunction

call MySplit('~/workspace/academic/.lvimrc')



